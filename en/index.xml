<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>In Pursuit of Simplicity</title>
    <link>https://ffffffff0.github.io/en/</link>
    <description>Recent content on In Pursuit of Simplicity</description>
    <image>
      <title>In Pursuit of Simplicity</title>
      <url>https://ffffffff0.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ffffffff0.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.146.7</generator>
    <language>en</language>
    <copyright>See this site&amp;rsquo;s source code here, licensed under GPLv3 Â·</copyright>
    <lastBuildDate>Sat, 13 Apr 2024 13:52:07 -0700</lastBuildDate>
    <atom:link href="https://ffffffff0.github.io/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TIL: Git Blame with Following</title>
      <link>https://ffffffff0.github.io/en/post/2024/git_blame_with_following/</link>
      <pubDate>Sat, 13 Apr 2024 12:46:00 -0700</pubDate>
      <guid>https://ffffffff0.github.io/en/post/2024/git_blame_with_following/</guid>
      <description>&lt;p&gt;Developers usually use &lt;code&gt;git blame&lt;/code&gt; in GUI tools like GitHub Blame &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
    
    
    &lt;input type=&#34;checkbox&#34; id=&#34;zoomCheck-68df0&#34; hidden&gt;
    &lt;label for=&#34;zoomCheck-68df0&#34;&gt;
    
    
    &lt;img class=&#34;zoomCheck&#34; loading=&#34;lazy&#34; src=&#34;https://ffffffff0.github.io/ox-hugo/github_blame.png&#34;/&gt; 
    
    
    &lt;/label&gt;
&lt;/figure&gt;
 &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;or using GitLens blame in VSCode: &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;
&lt;figure&gt;
    
    
    &lt;input type=&#34;checkbox&#34; id=&#34;zoomCheck-7f082&#34; hidden&gt;
    &lt;label for=&#34;zoomCheck-7f082&#34;&gt;
    
    
    &lt;img class=&#34;zoomCheck&#34; loading=&#34;lazy&#34; src=&#34;https://ffffffff0.github.io/ox-hugo/git_blame_git_lens_vscode.png&#34;/&gt; 
    
    
    &lt;/label&gt;
&lt;/figure&gt;
 &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Even though GUI tools is intuitive, but the Git CLI has much more powerful tooling for finding something closer to the real story behind your code. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;There are many scenarios that CLI is valuable, the first is ignoring the whitespace changes. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;For example, if you formatted your C++ codebase with &lt;code&gt;clang-format&lt;/code&gt; or Javascript codebase with &lt;code&gt;prettier&lt;/code&gt;, you haven&amp;rsquo;t actually changed the codebase, but you&amp;rsquo;re the owner of tons of lines of code. &lt;br/&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Developers usually use <code>git blame</code> in GUI tools like GitHub Blame <br/></p>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-68df0" hidden>
    <label for="zoomCheck-68df0">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/github_blame.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>or using GitLens blame in VSCode: <br/></p>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-7f082" hidden>
    <label for="zoomCheck-7f082">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/git_blame_git_lens_vscode.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>Even though GUI tools is intuitive, but the Git CLI has much more powerful tooling for finding something closer to the real story behind your code. <br/></p>
<p>There are many scenarios that CLI is valuable, the first is ignoring the whitespace changes. <br/></p>
<p>For example, if you formatted your C++ codebase with <code>clang-format</code> or Javascript codebase with <code>prettier</code>, you haven&rsquo;t actually changed the codebase, but you&rsquo;re the owner of tons of lines of code. <br/></p>
<p>The <code>git blame -w</code> option will ignore these type of whitespace changes. <br/></p>
<p>The other great option is <code>-C</code> which will look for code movement between files in a commit. <br/></p>
<p>For example, if you refactor a function from one file to another, the normal <code>git</code> blame will simply show you as the author in the new file, but the <code>-C</code> option will follow that movement and show the last person who actually change those lines of code. <br/></p>
<p><code>-C</code> is extremely helpful when I need to find out the original author of some lines of code after file renames or refactors, to know more about the background and context behind this code <br/></p>
<p>According to the <code>git blame</code> doc, you could pass <code>-C</code> up to three times to ask Git try even harder: <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-C<span class="o">[</span>&lt;num&gt;<span class="o">]</span>
</span></span><span class="line"><span class="cl">           In addition to -M, detect lines moved or copied from other files that were modified in the same commit.
</span></span><span class="line"><span class="cl">           This is useful when you reorganize your program and move code around across files.
</span></span><span class="line"><span class="cl">           When this option is given twice, the <span class="nb">command</span> additionally looks <span class="k">for</span> copies from other files in the commit that creates the file.
</span></span><span class="line"><span class="cl">           When this option is given three times, the <span class="nb">command</span> additionally looks <span class="k">for</span> copies from other files in any commit.
</span></span></code></pre></td></tr></table>
</div>
</div><p>(it&rsquo;s a bit of odd design) <br/></p>
<p>Let&rsquo;s take <a href="https://github.com/rails/rails/blob/main/activemodel/lib/active_model/access.rb">the access.rb file of ActiveModel module in Rails framework</a> for example: <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git blame activemodel/lib/active_model/access.rb
</span></span></code></pre></td></tr></table>
</div>
</div><p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-b230f" hidden>
    <label for="zoomCheck-b230f">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/normal_git_blame.png"
         alt="Figure 1: Vanilla git blame"/> 
    
    
    </label><figcaption>
            <p><span class="figure-number">Figure 1: </span>Vanilla git blame</p>
        </figcaption>
</figure>
 <br/></p>
<p>Ok, it looks like Jonathan Hefner wrote all of this code it appears, let&rsquo;s look at the same code with <code>git blame -w -C -C -C activemodel/lib/active_model/access.rb</code> <br/></p>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-dab9e" hidden>
    <label for="zoomCheck-dab9e">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/git_blame_-w_-C_-C_-C.png"
         alt="Figure 2: git blame -w -C -C -C"/> 
    
    
    </label><figcaption>
            <p><span class="figure-number">Figure 2: </span>git blame -w -C -C -C</p>
        </figcaption>
</figure>
 <br/></p>
<p>Now we can see that Git has followed this code from file to file over the course of multiple renames, it turns out Jonathan Hefner is the most recent file renamer, Guillermo Iguaran is the original author. <br/></p>
<p>If we want to know the history about this file, it&rsquo;s much better to ask Guillermo rather than Jonathan, which is beyond what the GUI blame or normal Git blame tool reveals <br/></p>
]]></content:encoded>
    </item>
    <item>
      <title>TIL: Git Conditional Configs</title>
      <link>https://ffffffff0.github.io/en/post/2024/git_conditional_configs/</link>
      <pubDate>Sun, 07 Apr 2024 12:38:00 -0700</pubDate>
      <guid>https://ffffffff0.github.io/en/post/2024/git_conditional_configs/</guid>
      <description>&lt;p&gt;Every Git user will have probably been asked to set up their Git at the first time: &lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global user.name &lt;span class=&#34;s2&#34;&gt;&amp;#34;Ramsay Leung&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global user.email ramsayleung@gmail.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The above command will simply add the &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt; value into your &lt;code&gt;~/.gitconfig&lt;/code&gt; file &lt;br/&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; cat ~/.gitconfig
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;user&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Ramsay Leung
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ramsayleung@gmail.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;core&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;quotepath&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;init&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;defaultBranch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;You could also specify &lt;code&gt;--local&lt;/code&gt; argument to writes the config values to &lt;code&gt;.git/config&lt;/code&gt; in whatever project you&amp;rsquo;re currently in. &lt;br/&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Every Git user will have probably been asked to set up their Git at the first time: <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global user.name <span class="s2">&#34;Ramsay Leung&#34;</span>
</span></span><span class="line"><span class="cl">git config --global user.email ramsayleung@gmail.com
</span></span></code></pre></td></tr></table>
</div>
</div><p>The above command will simply add the <code>user.name</code> and <code>user.email</code> value into your <code>~/.gitconfig</code> file <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">&gt; cat ~/.gitconfig
</span></span><span class="line"><span class="cl"><span class="o">[</span>user<span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="nv">name</span> <span class="o">=</span> Ramsay Leung
</span></span><span class="line"><span class="cl">    <span class="nv">email</span> <span class="o">=</span> ramsayleung@gmail.com
</span></span><span class="line"><span class="cl"><span class="o">[</span>core<span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="nv">quotepath</span> <span class="o">=</span> <span class="nb">false</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>init<span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="nv">defaultBranch</span> <span class="o">=</span> main
</span></span></code></pre></td></tr></table>
</div>
</div><p>You could also specify <code>--local</code> argument to writes the config values to <code>.git/config</code> in whatever project you&rsquo;re currently in. <br/></p>
<p>If you need to simultaneously contribute to your work and open source project on the same laptop, with different Git config values, e.g.(company email address for work-specific projects, personal email address for open source project), what should you do? <br/></p>
<p>You could definitely set up work-specific config as global config, then set up personal config with <code>--local</code> for every personal project separately. It works, but tedious and easy to mess-up. <br/></p>
<p>Fortunately, starting from Git version 2.13, Git supports conditional configuration includes, you are capable of setting up different configs for different repositories. <br/></p>
<p>If you add the following config to your global config file: <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">includeIf</span> <span class="s2">&#34;gitdir:~/projects/oss/&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span> <span class="p">=</span> <span class="err">~/</span><span class="p">.</span><span class="nx">gitconfig-oss</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">includeIf</span> <span class="s2">&#34;gitdir:~/projects/work/&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span> <span class="p">=</span> <span class="err">~/</span><span class="p">.</span><span class="nx">gitconfig-work</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then Git will look in the <code>~/.gitconfig-oss</code> files for values only if the project you are currently working on matches <code>~/projects/oss/</code>. <br/></p>
<p><strong><strong>Caution</strong></strong>: If you forget to specify the &ldquo;/&rdquo; at the end of the git dir, e.g. &ldquo;~/projects/oss&rdquo;, Conditional Config won&rsquo;t work! <br/></p>
<p>Therefore, you could have a &ldquo;work&rdquo; directory and work-specific config here and an &ldquo;oss&rdquo; directory with values for your open source projects, etc. <br/></p>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-d0b28" hidden>
    <label for="zoomCheck-d0b28">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/conditional_config.png"/> 
    
    
    </label>
</figure>
 <br/></p>
<p>Git also supports other filters more than <code>gitdir</code>, you could specify a branch name as an include filter with <code>onbranch</code> <br/></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl">  <span class="err">;</span> <span class="nx">include</span> <span class="nx">only</span> <span class="nx">if</span> <span class="nx">we</span> <span class="nx">are</span> <span class="nx">in</span> <span class="nx">a</span> <span class="nx">worktree</span> <span class="nx">where</span> <span class="nx">foo-branch</span> <span class="nx">is</span>
</span></span><span class="line"><span class="cl"><span class="err">;</span> <span class="nx">currently</span> <span class="nx">checked</span> <span class="nx">out</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">includeIf</span> <span class="s2">&#34;onbranch:foo-branch&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="nx">path</span> <span class="p">=</span> <span class="nx">foo</span><span class="p">.</span><span class="nx">inc</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Check out <a href="https://git-scm.com/docs/git-config?ref=blog.gitbutler.com#_includes">the Git docs</a> for more details <br/></p>
]]></content:encoded>
    </item>
    <item>
      <title>Rewind your Github summary</title>
      <link>https://ffffffff0.github.io/en/post/2024/github_summary/</link>
      <pubDate>Mon, 01 Jan 2024 16:16:00 -0800</pubDate>
      <guid>https://ffffffff0.github.io/en/post/2024/github_summary/</guid>
      <description>&lt;h2 id=&#34;goodbye-2023&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Goodbye 2023&lt;/h2&gt;
&lt;p&gt;As I farewelled to 2023, a year marked by numerous changes and personal evolution, I find myself recollecting the multitude of experiences that unfolded. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;My 2023 journey was nothing short of fascinating and exciting, prompting me to revisit the year from various angles. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;After seeing hoards of posts in social media generated by &lt;a href=&#34;https://github.com/sallar/github-contributions-chart&#34;&gt;Github Contributions Chart&lt;/a&gt;, I thought I could also build an APP to summarize my Github contribution for every year for friends to have fun. &lt;br/&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="goodbye-2023"><span class="section-num">1</span> Goodbye 2023</h2>
<p>As I farewelled to 2023, a year marked by numerous changes and personal evolution, I find myself recollecting the multitude of experiences that unfolded. <br/></p>
<p>My 2023 journey was nothing short of fascinating and exciting, prompting me to revisit the year from various angles. <br/></p>
<p>After seeing hoards of posts in social media generated by <a href="https://github.com/sallar/github-contributions-chart">Github Contributions Chart</a>, I thought I could also build an APP to summarize my Github contribution for every year for friends to have fun. <br/></p>
<p>I spent my entire 4-days-new-year vocation to build this app named: <a href="https://github-summary.vercel.app/">Github Summary</a>. <br/></p>
<p>This project led me through a series of first-time experiences: first time to try Tailwind Css framework, first time to use and deploy project on Vercel, first time to build project on nextjs, first time to develop a public project on React(yes, I&rsquo;ve tried to learn React for hundreds of times, but never get a chance to use it in real project), etc. <br/></p>
<h2 id="happy-2024"><span class="section-num">2</span> Happy 2024</h2>
<p>While I hoped I could have completed this project by the close of 2023 to share summaries with friends, life&rsquo;s timeline had other plans. <br/></p>
<p>Now, as we step into 2024, I am thrilled to publish the GitHub Summary. <br/></p>
<p>It&rsquo;s never too late to showcase creative work, and this project is poised to generate insightful summaries not just for the past year but for the adventures that await in 2024. <br/></p>
<p>Wishing everyone a Happy New Year! Feel free to explore <a href="https://github-summary.vercel.app/">GitHub Summary</a>: <a href="https://github-summary.vercel.app/">https://github-summary.vercel.app/</a> <br/></p>
<p>
<figure>
    
    
    <input type="checkbox" id="zoomCheck-385a8" hidden>
    <label for="zoomCheck-385a8">
    
    
    <img class="zoomCheck" loading="lazy" src="/ox-hugo/github_summary.png"/> 
    
    
    </label>
</figure>
 <br/></p>
]]></content:encoded>
    </item>
    <item>
      <title>About Me</title>
      <link>https://ffffffff0.github.io/en/about_me/</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://ffffffff0.github.io/en/about_me/</guid>
      <description>&lt;h2 id=&#34;about-me&#34;&gt;About me&lt;/h2&gt;</description>
      <content:encoded><![CDATA[<h2 id="about-me">About me</h2>
]]></content:encoded>
    </item>
  </channel>
</rss>
