[{"content":"Developers usually use git blame in GUI tools like GitHub Blame or using GitLens blame in VSCode: Even though GUI tools is intuitive, but the Git CLI has much more powerful tooling for finding something closer to the real story behind your code. There are many scenarios that CLI is valuable, the first is ignoring the whitespace changes. For example, if you formatted your C++ codebase with clang-format or Javascript codebase with prettier, you haven\u0026rsquo;t actually changed the codebase, but you\u0026rsquo;re the owner of tons of lines of code. The git blame -w option will ignore these type of whitespace changes. The other great option is -C which will look for code movement between files in a commit. For example, if you refactor a function from one file to another, the normal git blame will simply show you as the author in the new file, but the -C option will follow that movement and show the last person who actually change those lines of code. -C is extremely helpful when I need to find out the original author of some lines of code after file renames or refactors, to know more about the background and context behind this code According to the git blame doc, you could pass -C up to three times to ask Git try even harder: 1 2 3 4 5 -C[\u0026lt;num\u0026gt;] In addition to -M, detect lines moved or copied from other files that were modified in the same commit. This is useful when you reorganize your program and move code around across files. When this option is given twice, the command additionally looks for copies from other files in the commit that creates the file. When this option is given three times, the command additionally looks for copies from other files in any commit. (it\u0026rsquo;s a bit of odd design) Let\u0026rsquo;s take the access.rb file of ActiveModel module in Rails framework for example: 1 git blame activemodel/lib/active_model/access.rb Figure 1: Vanilla git blame\nOk, it looks like Jonathan Hefner wrote all of this code it appears, let\u0026rsquo;s look at the same code with git blame -w -C -C -C activemodel/lib/active_model/access.rb Figure 2: git blame -w -C -C -C\nNow we can see that Git has followed this code from file to file over the course of multiple renames, it turns out Jonathan Hefner is the most recent file renamer, Guillermo Iguaran is the original author. If we want to know the history about this file, it\u0026rsquo;s much better to ask Guillermo rather than Jonathan, which is beyond what the GUI blame or normal Git blame tool reveals ","permalink":"https://ffffffff0.github.io/en/post/2024/git_blame_with_following/","summary":"\u003cp\u003eDevelopers usually use \u003ccode\u003egit blame\u003c/code\u003e in GUI tools like GitHub Blame \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003e\n\u003cfigure\u003e\n    \n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-68df0\" hidden\u003e\n    \u003clabel for=\"zoomCheck-68df0\"\u003e\n    \n    \n    \u003cimg class=\"zoomCheck\" loading=\"lazy\" src=\"/ox-hugo/github_blame.png\"/\u003e \n    \n    \n    \u003c/label\u003e\n\u003c/figure\u003e\n \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eor using GitLens blame in VSCode: \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003e\n\u003cfigure\u003e\n    \n    \n    \u003cinput type=\"checkbox\" id=\"zoomCheck-7f082\" hidden\u003e\n    \u003clabel for=\"zoomCheck-7f082\"\u003e\n    \n    \n    \u003cimg class=\"zoomCheck\" loading=\"lazy\" src=\"/ox-hugo/git_blame_git_lens_vscode.png\"/\u003e \n    \n    \n    \u003c/label\u003e\n\u003c/figure\u003e\n \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eEven though GUI tools is intuitive, but the Git CLI has much more powerful tooling for finding something closer to the real story behind your code. \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eThere are many scenarios that CLI is valuable, the first is ignoring the whitespace changes. \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eFor example, if you formatted your C++ codebase with \u003ccode\u003eclang-format\u003c/code\u003e or Javascript codebase with \u003ccode\u003eprettier\u003c/code\u003e, you haven\u0026rsquo;t actually changed the codebase, but you\u0026rsquo;re the owner of tons of lines of code. \u003cbr/\u003e\u003c/p\u003e","title":"TIL: Git Blame with Following"},{"content":"Every Git user will have probably been asked to set up their Git at the first time: 1 2 git config --global user.name \u0026#34;Ramsay Leung\u0026#34; git config --global user.email ramsayleung@gmail.com The above command will simply add the user.name and user.email value into your ~/.gitconfig file 1 2 3 4 5 6 7 8 \u0026gt; cat ~/.gitconfig [user] name = Ramsay Leung email = ramsayleung@gmail.com [core] quotepath = false [init] defaultBranch = main You could also specify --local argument to writes the config values to .git/config in whatever project you\u0026rsquo;re currently in. If you need to simultaneously contribute to your work and open source project on the same laptop, with different Git config values, e.g.(company email address for work-specific projects, personal email address for open source project), what should you do? You could definitely set up work-specific config as global config, then set up personal config with --local for every personal project separately. It works, but tedious and easy to mess-up. Fortunately, starting from Git version 2.13, Git supports conditional configuration includes, you are capable of setting up different configs for different repositories. If you add the following config to your global config file: 1 2 3 4 5 [includeIf \u0026#34;gitdir:~/projects/oss/\u0026#34;] path = ~/.gitconfig-oss [includeIf \u0026#34;gitdir:~/projects/work/\u0026#34;] path = ~/.gitconfig-work Then Git will look in the ~/.gitconfig-oss files for values only if the project you are currently working on matches ~/projects/oss/. Caution: If you forget to specify the \u0026ldquo;/\u0026rdquo; at the end of the git dir, e.g. \u0026ldquo;~/projects/oss\u0026rdquo;, Conditional Config won\u0026rsquo;t work! Therefore, you could have a \u0026ldquo;work\u0026rdquo; directory and work-specific config here and an \u0026ldquo;oss\u0026rdquo; directory with values for your open source projects, etc. Git also supports other filters more than gitdir, you could specify a branch name as an include filter with onbranch 1 2 3 4 ; include only if we are in a worktree where foo-branch is ; currently checked out [includeIf \u0026#34;onbranch:foo-branch\u0026#34;] path = foo.inc Check out the Git docs for more details ","permalink":"https://ffffffff0.github.io/en/post/2024/git_conditional_configs/","summary":"\u003cp\u003eEvery Git user will have probably been asked to set up their Git at the first time: \u003cbr/\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config --global user.name \u003cspan class=\"s2\"\u003e\u0026#34;Ramsay Leung\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config --global user.email ramsayleung@gmail.com\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eThe above command will simply add the \u003ccode\u003euser.name\u003c/code\u003e and \u003ccode\u003euser.email\u003c/code\u003e value into your \u003ccode\u003e~/.gitconfig\u003c/code\u003e file \u003cbr/\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026gt; cat ~/.gitconfig\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003euser\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e Ramsay Leung\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003eemail\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e ramsayleung@gmail.com\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003ecore\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003equotepath\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003einit\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nv\"\u003edefaultBranch\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e main\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eYou could also specify \u003ccode\u003e--local\u003c/code\u003e argument to writes the config values to \u003ccode\u003e.git/config\u003c/code\u003e in whatever project you\u0026rsquo;re currently in. \u003cbr/\u003e\u003c/p\u003e","title":"TIL: Git Conditional Configs"},{"content":"1 Goodbye 2023 As I farewelled to 2023, a year marked by numerous changes and personal evolution, I find myself recollecting the multitude of experiences that unfolded. My 2023 journey was nothing short of fascinating and exciting, prompting me to revisit the year from various angles. After seeing hoards of posts in social media generated by Github Contributions Chart, I thought I could also build an APP to summarize my Github contribution for every year for friends to have fun. I spent my entire 4-days-new-year vocation to build this app named: Github Summary. This project led me through a series of first-time experiences: first time to try Tailwind Css framework, first time to use and deploy project on Vercel, first time to build project on nextjs, first time to develop a public project on React(yes, I\u0026rsquo;ve tried to learn React for hundreds of times, but never get a chance to use it in real project), etc. 2 Happy 2024 While I hoped I could have completed this project by the close of 2023 to share summaries with friends, life\u0026rsquo;s timeline had other plans. Now, as we step into 2024, I am thrilled to publish the GitHub Summary. It\u0026rsquo;s never too late to showcase creative work, and this project is poised to generate insightful summaries not just for the past year but for the adventures that await in 2024. Wishing everyone a Happy New Year! Feel free to explore GitHub Summary: https://github-summary.vercel.app/ ","permalink":"https://ffffffff0.github.io/en/post/2024/github_summary/","summary":"\u003ch2 id=\"goodbye-2023\"\u003e\u003cspan class=\"section-num\"\u003e1\u003c/span\u003e Goodbye 2023\u003c/h2\u003e\n\u003cp\u003eAs I farewelled to 2023, a year marked by numerous changes and personal evolution, I find myself recollecting the multitude of experiences that unfolded. \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eMy 2023 journey was nothing short of fascinating and exciting, prompting me to revisit the year from various angles. \u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eAfter seeing hoards of posts in social media generated by \u003ca href=\"https://github.com/sallar/github-contributions-chart\"\u003eGithub Contributions Chart\u003c/a\u003e, I thought I could also build an APP to summarize my Github contribution for every year for friends to have fun. \u003cbr/\u003e\u003c/p\u003e","title":"Rewind your Github summary"},{"content":"About me ","permalink":"https://ffffffff0.github.io/en/about_me/","summary":"\u003ch2 id=\"about-me\"\u003eAbout me\u003c/h2\u003e","title":"About Me"}]